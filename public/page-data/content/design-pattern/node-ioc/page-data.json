{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/design-pattern/node-ioc/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"92e04cbb-bc6a-5416-9804-2ed02feab9ad","excerpt":"前言 随着项目需求的增加，Node…","html":"<h2>前言</h2>\n<p>随着项目需求的增加，Node 模块也相继增加，各模块间的依赖耦合度越来越严重，非常难维护，有时候改一处代码需要懂好几处代码，项目逐渐达到牵一发而动全身的地步，所谓<code class=\"language-text\">高内聚、低耦合</code>完全没得谈，如何做到模块间高度解耦是每个工程师必要思考的问题。</p>\n<h2>设计模式</h2>\n<p>为了解决模块间依赖耦合的问题，最好的办法就是要找到一种设计模式来帮助我们做到模块间解耦。其中做的很好的两个就是 DI 和 IOC 了，下面来探讨一下这两种设计模式。</p>\n<h2>Dependency Injection</h2>\n<p><code class=\"language-text\">Dependency Injection</code>简称<code class=\"language-text\">DI</code>,中文是依赖注入的意思。即模块之间的依赖由高层模块在运行期决定，形象的说，当高层模块在运行时确定需要哪个底层模块，并且注入进去。来看下面 🌰。</p>\n<p><strong>noDI</strong></p>\n<p>这里有两个类，一个是订单模块类，一个是订单控制器类。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 订单model类   models/Order.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//......数据库操作</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 订单类 controllers/OrderController.js</span>\n<span class=\"token keyword\">const</span> Order <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Order.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">craeteOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//router/index.js</span>\n<span class=\"token keyword\">const</span> OrderController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/OrderController.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> orderController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面是没有依赖注入的情况，可以看出<code class=\"language-text\">OrderController</code>类严重耦合了<code class=\"language-text\">Order</code>类。上面的<code class=\"language-text\">OrderController</code>类依赖了<code class=\"language-text\">Order</code>类，所以在使用的时候就必须先<code class=\"language-text\">require</code> <code class=\"language-text\">Order</code>类，才可以在<code class=\"language-text\">OrderController</code>类中使用。耦合性太高，假如我们需要把<code class=\"language-text\">Order</code>类文件移动到了别的目录，那么所有依赖这个类的文件都需要变化。</p>\n<p><strong>DI</strong></p>\n<p>沿用上面两个类，我们来看一下依赖注入的情况。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 订单model类   models/Order.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//......数据库操作</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 订单类 controllers/OrderController.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">craeteOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//router/index.js</span>\n<span class=\"token keyword\">const</span> Order <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/Order.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> OrderController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/OrderController.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> orderController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>从上面代码来看<code class=\"language-text\">OrderController</code>类文件中已经不需要手动的引入<code class=\"language-text\">Order</code>类了，而是通过 constructor 在运行时的时候传进去。在 router 文件中，当实例化<code class=\"language-text\">OrderController</code>类的时候，同时也实例化<code class=\"language-text\">Order</code>类，并且作为<code class=\"language-text\">OrderController</code>构造函数的参数传进去。</p>\n<h3>小结</h3>\n<p>可以看出依赖注入已经让我们模块间解耦，但是还是有点不足之处，下面总结一下依赖注入的优点与不足。</p>\n<p><strong>优点</strong></p>\n<p>通过依赖注入的方式，是我们高层模块和底层模块间的耦合降低了，因此，当底层模块位置变化的时候，我们只需要懂 router 中的依赖路径就可以了，高层模块中做了什么我们都不需要关心了。</p>\n<p><strong>不足</strong></p>\n<p>可以看出我们所有的依赖的模块都是在 router 模块中引入的，明显的降低了 router 模块的复杂性。我们需要一个用来专门管理注入方以及被注入方的容器，让 router 模块和往常一样轻量，没错这个东西就是 IOC。</p>\n<h2>Inversion of Control</h2>\n<p><code class=\"language-text\">Inversion of Control</code>简称<code class=\"language-text\">IOC</code>，即控制反转，并不是什么技术，而是一种设计模式。上面提到 DI 的不足可以使用 IOC 来解决，其实 IOC 也叫 DI。IOC 意味着将依赖模块和被依赖模块都交给容器去管理，当我们使用模块的时候，由容器动态的将它的依赖关系注入到模块中去。依据上面 DI 的思想，下面就来实现以下 IOC。</p>\n<p>首先 IOC 中有个容器的概念，用来管理所有模块。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOC</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们要有一个方法，用于让我们往容器中存入模块，例如上面 Order 类，IOC 必须要有这么一个方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Order <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/Order.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> OrderController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/OrderController.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">ioc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'order'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>bind 方法用于往 IOC 容器中存放模块间的依赖，并此刻确定高层模块的依赖项。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOC</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面就是 bind 方法很简单，你会发现我在容器的每一项上添加了 single 属性，这是用来标识有些类时单例的。下面来实现以下单例的写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOC</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当模块放入容器中的时候，我们需要用的时候怎么办呢？所以必须要有一个方法用于获取到容器中的模块。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//router.js</span>\n<span class=\"token keyword\">const</span> ioc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> orderController <span class=\"token operator\">=</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'order'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面通过 use 方法就可以获取到了。下面是 use 方法的实现</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOC</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>single <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      item<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>single <span class=\"token operator\">?</span> item<span class=\"token punctuation\">.</span>instance <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面代码就是 use 方法的实现，首先通过 key 值在容器中找到对应的模块，判断如果模块不存在则报错，然后判断是否是单例，如果是单例判断是否已经被实例化，已经实例化就不需要再进行，最后如果是单例的话返回单例实例，则执行 callback 实例化。</p>\n<p>以上的代码完全可以做到 IOC 的功能。</p>\n<h2>添油加醋</h2>\n<p>运行在服务器上的代码，当我们去做测试的时候，肯定不能直接使用运行时的代码。随意我们给 IOC 添油加醋，做一个测试所用的容器。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOC</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fakes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fakes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> single<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fakes<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">findInContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fakes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fakes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findInContainer</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>single <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      item<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>single <span class=\"token operator\">?</span> item<span class=\"token punctuation\">.</span>instance <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面添加了三种方法：<code class=\"language-text\">fake</code>、<code class=\"language-text\">restore</code>、<code class=\"language-text\">findInContainer</code></p>\n<ol>\n<li>fake 方法的作用是往测试容器中添加模块</li>\n<li>restore 方法的作用是删除测试容器中的模块</li>\n<li>findInContainer 的作用是统一 use 方法中生产容器和测试容器中获取模块的方法，当测试容器中存在的时候就取测试容器中的，否则取生产容器中的。(这里注意：测试容器中的模块用完即删)</li>\n</ol>\n<p>最后我们通过订单类 🌰 来实践一下使用 IOC 的情况。</p>\n<p>//首先定义一个 constants 文件用于存在所有的 key 值</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  order<span class=\"token punctuation\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'order'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TYPES</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后创建一个 orderIOC 文件做 IOC 的注册中心</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">IOC</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ioc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Order <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/Order.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> OrderController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/OrderController.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">TYPES</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../constants'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ioc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">ioc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TYPES</span><span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ioc</code></pre></div>\n<p>在 router 文件中通过 IOC 来获取到 OrderController 类的实例,以 koa 为例</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ioc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../ioc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">TYPES</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../constants'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> orderController <span class=\"token operator\">=</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TYPES</span><span class=\"token punctuation\">.</span>order<span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/create'</span><span class=\"token punctuation\">,</span> orderController<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">app</span> <span class=\"token operator\">=></span> app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>总结</h2>\n<p>依赖耦合永远都是我们在写业务上必须要解决的问题，无论是服务端的模块化还是前端的组件化，降低依赖和让模块更稳定，更独立，实现关注点分离。非常感谢您的阅读。</p>","frontmatter":{"title":"IOC在Nodejs上的初体验","date":"October 03, 2019","description":"模块间解耦，IOC在Node上的实战","category":"design-pattern"}}},"pageContext":{"slug":"/content/design-pattern/node-ioc/","previous":{"fields":{"slug":"/content/Vue/vue-start-pre-newvue/"},"frontmatter":{"title":"浅析从加载到new Vue()--Vue做了什么？"}},"next":{"fields":{"slug":"/content/Webpack/webpack-mpa-solution/"},"frontmatter":{"title":"webpack多页面打包方案"}}}}}