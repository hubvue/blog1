{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/Webpack/webpack-mpa-solution/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"8c1d2bd5-b936-52bf-ae3f-3b838e88da79","excerpt":"webpack 打包多页的痛点 我们都知道前端还有一个名字叫 webpack 配置工程师，也表示我们前端在写项目的时候，写 webpack 配置要花费很长的时间。\n当 webpack 去打包一个 SPA 的时候还好，配置只需要写一遍就可以了。但是如果使用 webpack…","html":"<h2>webpack 打包多页的痛点</h2>\n<p>我们都知道前端还有一个名字叫 webpack 配置工程师，也表示我们前端在写项目的时候，写 webpack 配置要花费很长的时间。\n当 webpack 去打包一个 SPA 的时候还好，配置只需要写一遍就可以了。但是如果使用 webpack 去打包多页，那么配置的工作量将会秩序下去。例如下面这些配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    index<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    about<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面我们配置了两个入口，如果是打包多页，那么必然会有两个<code class=\"language-text\">HTMLWebpackPlugin</code>去配置 html。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.html'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'about.html'</span><span class=\"token punctuation\">,</span>\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/about.html'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>像上面这些配置，我们配置了两个页面，但是如果后面要继续添加需求的话，我们还是要手动的去配置新的页面。回想一下我们使用 webpack 的目的是什么：配置工程化，解放双手。多页很显然就违背了我们的理念，那么有什么方法解决这样的问题吗？很显然是有的。</p>\n<h2>多页面打包方案</h2>\n<blockquote>\n<p>对于任何问题，都有特定的规则去解决，而我们解决问题的过程就是寻找规则的过程。</p>\n</blockquote>\n<p>上面说了一句名言 😆，当然对于打包多页也是试用的。</p>\n<p>我们只需要规定统一目录结构，比如说我们有两个页面，那么我们的目录结构就配置成</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">src/pages/index/index.html\nsrc/pages/about/index.html</code></pre></div>\n<p>对于上面两个页面，我们设置两个特定的入口 js 和 html 文件放在一起。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">src/pages/index/index.js\nsrc/pages/about/index.js</code></pre></div>\n<p>在 webpack 中我们就可以根据这种规则通过正则去找到其中的不同点：比如说 index 页面的 pageName 为 index，about 页面的 pageName 为 about。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setMpa</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> htmlPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> entrys <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/pages/**/*.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pageName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/pages\\/[\\w\\W]*(?=\\/index.js)/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    entrys<span class=\"token punctuation\">[</span>pageName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/pages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.js</span><span class=\"token template-punctuation string\">`</span></span>\n    htmlPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/pages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        chunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>pageName<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entrys<span class=\"token punctuation\">,</span>\n    htmlPlugins\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们就可以写这样一个函数，通过正则拿到不同，动态的去配置 entry 和 HtmlWebpackPlugin。</p>\n<p>执行这个函数就可以得到 entrys 和 htmlPlugins</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> entrys<span class=\"token punctuation\">,</span> htmlPlugins <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">setMpa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> entrys<span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>ModuleConcatenationPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>htmlPlugins<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样之后要添加新页面，只要按照目录的规则去添加，不再需要修改配置了 😁。</p>\n<h2>总结</h2>\n<p>对于 webpack 打包多页的痛点，我们设计出统一的规则去解决，总体规则如下：</p>\n<ul>\n<li>统一目录规范</li>\n<li>统一入口文件</li>\n<li>使用 glob.sync 获取到所有入口文件</li>\n<li>正则匹配得到 pageName</li>\n<li>动态设置 entrys 和 htmlPlugins</li>\n</ul>","frontmatter":{"title":"webpack多页面打包方案","date":"October 11, 2019","description":"分析webpack打包多页的痛点，统一规则，动态配置解决","category":"Webpack"}}},"pageContext":{"slug":"/content/Webpack/webpack-mpa-solution/","previous":{"fields":{"slug":"/content/design-pattern/node-ioc/"},"frontmatter":{"title":"IOC在Nodejs上的初体验"}},"next":{"fields":{"slug":"/content/Webpack/webpack-scope-hoisting/"},"frontmatter":{"title":"Webpack模块化的问题及Scope hoisting原理"}}}}}