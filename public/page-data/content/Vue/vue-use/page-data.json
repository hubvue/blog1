{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/Vue/vue-use/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"4c9007a9-d74c-5e1a-a630-6be6f796694d","excerpt":"前言 现在的工作使用 Vue 比较频繁，于是就想了解一下 Vue 原理上的东西，就先拿 Vue 的插件机制开刀吧。 Vue 的插件机制就是一个 API，即。 当我们在项目中使用 Vuex 的时候，肯定会写这样一段代码。 没有看过原理之前一直都觉得这个 API 好强大，就 use 了一下，就可以在整个项目中使用 Vuex…","html":"<h3>前言</h3>\n<p>现在的工作使用 Vue 比较频繁，于是就想了解一下 Vue 原理上的东西，就先拿 Vue 的插件机制开刀吧。</p>\n<p>Vue 的插件机制就是一个 API，即<code class=\"language-text\">Vue.use()</code>。</p>\n<p>当我们在项目中使用 Vuex 的时候，肯定会写这样一段代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span></code></pre></div>\n<p>没有看过原理之前一直都觉得<code class=\"language-text\">Vue.use</code>这个 API 好强大，就 use 了一下，就可以在整个项目中使用 Vuex。现在看了一下源码，也不过尔尔。</p>\n<h3>Vue.use</h3>\n<p><code class=\"language-text\">Vue.use</code>方法在 Vue 源码的<code class=\"language-text\">src/core/global-api/use.js</code>中，打开源码我们就可以看到一<code class=\"language-text\">小</code>段<code class=\"language-text\">Vue.use</code>的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin<span class=\"token punctuation\">:</span> Function <span class=\"token operator\">|</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> installedPlugins <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_installedPlugins <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_installedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>installedPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  args<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> plugin<span class=\"token punctuation\">.</span>install <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    plugin<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> plugin <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">plugin</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  installedPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>整段代码不超过 20 行，😮Vue.use 方法也太强了，20 行不到就写了一个插件系统。仔细看了才明白，Vue 这老大哥定了一个规矩，这个规矩就是：</p>\n<blockquote>\n<p>Vue 老大哥说：你们这些插件身上必须有一个 install 方法或者你们本身是一个方法，然后我把我自己给你们，你们想干啥干啥 😏</p>\n</blockquote>\n<p>就基本上就是<code class=\"language-text\">Vue.use</code>的作用了，我们来看一下源码做了什么。</p>\n<p>首先对于来注册的第三方插件，只能注册一次，不可以重复注册，从下面代码中可以找到答案。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> installedPlugins <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_installedPlugins <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_installedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>installedPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//.........code</span>\n\ninstalledPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vue 中维护了一个插件池<code class=\"language-text\">_installedPlugins</code>，先判断当前注册的插件在插件池中是否存在：如果存在直接放弃本地注册；如果不存在执行逻辑，最后把这个插件放入到插件池中。</p>\n<p>然后获取到<code class=\"language-text\">Vue.use</code>方法的 arguments，我们都知道 arguments 是一个类数组，将它转换成数据，将 Vue 放在数组的最前面。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nargs<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>由于本次调用时<code class=\"language-text\">Vue.use</code>，那么 use 函数中的 this 就是指向的 Vue。</p>\n<p>最后就是注册了</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> plugin<span class=\"token punctuation\">.</span>install <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  plugin<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> plugin <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">plugin</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>判断如果插件上有 install 方法，那么就通过 apply 执行，并且把 args 传进去；如果没有就判断插件是一个方法，就通过 apply 执行。</p>\n<h3>end</h3>\n<p>Vue 这种插件机制还是想的挺周到的。因为 Vue 插件必然会用到 Vue，而又避免引入 Vue 造成包体积过大，所以才使用将 Vue 构造函数传入插件这种方法，而且通过这种方式可以让插件有更高的可扩展性，便于在插件内部可以做很多事情。</p>","frontmatter":{"title":"Vue插件机制解析","date":"October 20, 2019","description":"深入源码解析Vue的插件机制","category":"Vue"}}},"pageContext":{"slug":"/content/Vue/vue-use/","previous":{"fields":{"slug":"/content/Vue/vue-mixin/"},"frontmatter":{"title":"Vue的mixin机制及mergeOptions解析"}},"next":{"fields":{"slug":"/content/Flutter/flutter-route-manage/"},"frontmatter":{"title":"Flutter：路由管理"}}}}}