{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/Vue/vue-mixin/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"4c01b8e4-d57b-5c89-965d-70022e336394","excerpt":"前言 Mixin 也就是混入的意思，就是说通过某种方式将一个对象的一些属性，混入到目标对象身上。对于我个人来说，其实并不太喜欢 Mixin 这是方式的，因为它对开发者来说是透明的，我们不知道什么时候同事去绑定了一个全局的 Mixin，当然用的好那肯定是不方便的，也无奈 Vue 的 Mixin…","html":"<h3>前言</h3>\n<p>Mixin 也就是混入的意思，就是说通过某种方式将一个对象的一些属性，混入到目标对象身上。对于我个人来说，其实并不太喜欢 Mixin 这是方式的，因为它对开发者来说是透明的，我们不知道什么时候同事去绑定了一个全局的 Mixin，当然用的好那肯定是不方便的，也无奈 Vue 的 Mixin 机制那么强大，所以就驱使我来深入了解它。</p>\n<h3>start</h3>\n<p>mixin 方法在<code class=\"language-text\">src/core/global-api</code>下的<code class=\"language-text\">mixin.js</code>文件中，打包文件我们可以看到以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initMixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue<span class=\"token punctuation\">:</span> GlobalAPI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Vue<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">mixin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin<span class=\"token punctuation\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> mixin<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Vue.mixin</code>方法也非常的简练，内部也是直接调用了 mergeOptions 方法，从方法名字上可以看出<code class=\"language-text\">合并Options</code>就大概知道是什么意思了。我们来看一下 mergeOptions 方法是怎么实现的，先贴一下代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">parent<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">,</span>\n  child<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">,</span>\n  vm<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Component</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Object <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">checkComponents</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>options\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 规范化</span>\n  <span class=\"token function\">normalizeProps</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">normalizeInject</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">normalizeDirectives</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>child<span class=\"token punctuation\">.</span>_base<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>extends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parent <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>extends<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> key\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> strat <span class=\"token operator\">=</span> strats<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> defaultStrat\n    options<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strat</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> options\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先我们看到 mergeOptions 函数传过来的前两个参数为<code class=\"language-text\">parent</code>和<code class=\"language-text\">child</code>，通过 mixin 里面的调用，我们可以知道要把<code class=\"language-text\">child</code>上的属性 merge 到<code class=\"language-text\">parent</code>上</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">checkComponents</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先在开发环境的时候会先检查一下 child 中的 components 属性，我们都知道这里是组件装载的地方，这里要检测一下命名是否正确。</p>\n<p>child 也可以是一个方法，如果是一个方法，那么就可以认为这是一个组件，重新赋值 child 为 child.options，下面是源码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>options\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来这段代码用于规范化 Props、Inject 已经 Directives。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">normalizeProps</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n<span class=\"token function\">normalizeInject</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n<span class=\"token function\">normalizeDirectives</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们都知道这三个东西在开发过程中有多种形式存在，就拿最常用的 Props 来说，props 可以是对象也可以是数组，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//数组方式</span>\nprops<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 对象的方式</span>\nprops<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> Array<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  info<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可见 Vue 提供了 props 的两种写法，便于我们在开发过程中写代码，但是在 Vue 内部必然要使用一种统一的方式去处理，要不然太浪费精力去处理另外一种情况，也让代码不具有可扩展性，所以就出现对这个多方式的配置有了规范化的处理。</p>\n<p>就拿 props 的规范化来说吧</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">normalizeProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>props\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> name\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      val <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> <span class=\"token function\">camelize</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'props must be strings when using array syntax.'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      val <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      name <span class=\"token operator\">=</span> <span class=\"token function\">camelize</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> val <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> val <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid value for option \"props\": expected an Array or an Object, </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">but got </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      vm\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  options<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里把 props 规范化都转化成了对象的方式，其它两个也是类似的操作。</p>\n<p>接下来的逻辑就是合并了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>child<span class=\"token punctuation\">.</span>_base<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>extends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>extends<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parent <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先判断 child 是否被合并过，只有合并过之后才有<code class=\"language-text\">_base</code>这个属性，然后判断 child 是否有 extends 和 mixins 属性，有的话就再次调用 mergeOptions 将它们合并到 parent 上。</p>\n<p>最后就是这部分合并逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> key\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> strat <span class=\"token operator\">=</span> strats<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> defaultStrat\n  options<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strat</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于 parent 和 child 都调用了 mergeField 函数用来合并，而 mergeField 中获取了 start 函数，看一下这个是干嘛的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">defaultStrat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentVal<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> childVal<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> any <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> childVal <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> parentVal <span class=\"token punctuation\">:</span> childVal\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>defaultStart 只是一个简单的选取函数，判断如果 childVal 不存在，就返回 parentVal，存在就返回 childVal，结合上面逻辑，你可能会想，child 这不就覆盖 parent 上的属性了吗？</p>\n<p>在上面还有这段逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mergeField</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在遍历 key 的时候如果 child 的 key 在 parent 存在的话就会忽略。</p>\n<p>上面说了<code class=\"language-text\">defaultStart</code>这个取值函数，对于 start 还有一个判断的逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> strat <span class=\"token operator\">=</span> strats<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> defaultStrat</code></pre></div>\n<p>这里做的是它会根据一些特定的 key 来使用一些特定的函数去处理，例如：<code class=\"language-text\">data</code>，生命周期，特定的<code class=\"language-text\">component，directive，filter</code>，<code class=\"language-text\">watch</code>，<code class=\"language-text\">props</code>，<code class=\"language-text\">provide</code>，<code class=\"language-text\"></code>methods<code class=\"language-text\">，</code>inject<code class=\"language-text\">，</code>computed`等等</p>\n<p>简单看了一下，这些也比较容易理解，先分析这么多。</p>\n<h3>end</h3>\n<p>本来想看 Vue 的 Mixin 的原理，实则是看的 mergeOptions 的原理，结果一发不可收拾。starts 这个东西还是做的蛮全面的，把特殊的属性都使用特定的方法来处理，受益无穷。</p>","frontmatter":{"title":"Vue的mixin机制及mergeOptions解析","date":"October 20, 2019","description":"深入源码解析Vue的mixin机制","category":"Vue"}}},"pageContext":{"slug":"/content/Vue/vue-mixin/","previous":{"fields":{"slug":"/content/Webpack/webpck-thread-cary/"},"frontmatter":{"title":"深入理解webpack痛点及解决方案"}},"next":{"fields":{"slug":"/content/Vue/vue-use/"},"frontmatter":{"title":"Vue插件机制解析"}}}}}