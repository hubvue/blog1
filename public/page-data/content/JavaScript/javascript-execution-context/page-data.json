{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/JavaScript/javascript-execution-context/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"df5feff9-a3e1-5069-88ca-3ca68971aefd","excerpt":"前言 作为一个前端 er，当我们在写 JavaScript 代码的时候，经常会被 JavaScript 中饱受诟病的特性搞的晕头转向。其变量提升、作用域、闭包等特性我们只能通过例子来摸索出特性的规律从而得出一个感觉的结论。其实，这些特性都和 JavaScript…","html":"<h2>前言</h2>\n<p>作为一个前端 er，当我们在写 JavaScript 代码的时候，经常会被 JavaScript 中饱受诟病的特性搞的晕头转向。其变量提升、作用域、闭包等特性我们只能通过例子来摸索出特性的规律从而得出一个感觉<code class=\"language-text\">差不多</code>的结论。其实，这些特性都和 JavaScript 执行环境有关，本篇文章通过探究从古至今的 JavaScript 执行环境来彻底弄明白变量提升、作用域、闭包等的原理。</p>\n<h2>什么是执行期上下文？</h2>\n<p>在 JavaScript 中存在执行期上下文这个概念，它表示 JavaScript 代码的执行环境。我们都知道 JavaScript 值单线程结构的，其内部维护着一个 JavaScript 函数执行栈。当全局代码和函数代码执行的时候，JavaScript 会对其生成一个执行期上下文，并把这个执行期上下文 push 到 JavaScript 函数执行栈中，当函数执行完毕的时候 JavaScript 函数执行栈会把函数的执行器上下文弹出。</p>\n<p>JavaScript 中的执行期上下文主要分为 3 中：</p>\n<ol>\n<li>Global Execution Context</li>\n<li>Function Execution Context</li>\n<li>Eval Execution Context</li>\n</ol>\n<p>本文主要以前两种常用的进行探究。</p>\n<p>例如以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global exection context</span>\n<span class=\"token keyword\">var</span> syHello <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">person</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//function execution context</span>\n  <span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token string\">'wang'</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> <span class=\"token string\">'chong'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//function execution context</span>\n    <span class=\"token keyword\">return</span> first\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//function execution context</span>\n    reutnr lase<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sayHello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面代码中存在着两种执行器上下文，JavaScript 代码顺序执行，其函数执行栈会发生以下变化：</p>\n<ol>\n<li>当 JavaScript 代码整体执行的时候会把<code class=\"language-text\">GlobalExectionContext</code>push 到 JavaScript 函数执行栈中</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExectionContext</code></pre></div>\n<ol start=\"2\">\n<li>当执行 person 函数的时候，会生成一个<code class=\"language-text\">FunctionExecutionContext</code>，并把它 push 到 JavaScript 函数执行栈中</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nGlobalExectionContext</code></pre></div>\n<ol start=\"3\">\n<li>person 函数内部：首先执行 firstName 函数，为其生成<code class=\"language-text\">FunctionExecutionContext</code>，并把它 push 到 JavaScript 函数执行栈中</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span>\n<span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nGlobalExectionContext</code></pre></div>\n<ol start=\"4\">\n<li>当 firstName 函数执行结束的时候，JavaScript 函数执行栈会将其对应的执行器上下文 pop 出去</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nGlobalExectionContext</code></pre></div>\n<ol start=\"5\">\n<li>firstName 函数执行完毕之后，会接着执行 lastName 函数，为其生成<code class=\"language-text\">FunctionExecutionContext</code>，并 push 到 JavaScript 函数执行栈中</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span>\n<span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nGlobalExectionContext</code></pre></div>\n<ol start=\"6\">\n<li>当 lastName 函数执行完毕之后，将其从 JavaScript 函数执行栈中弹出。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">FunctionExecutionContext</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nGlobalExectionContext</code></pre></div>\n<ol start=\"7\">\n<li>person 函数执行结束，将其从 JavaScript 函数执行栈中弹出</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExectionContext</code></pre></div>\n<ol start=\"8\">\n<li>整体代码执行完毕，将全局执行期上下文弹出。</li>\n</ol>\n<p>这就是 JavaScript 代码的整体运行流程，那么很好奇的是，这个 ExecutionContext 到底是什么？下文就要揭开它的神秘面纱。</p>\n<p>现在 JavaScript 已经发展到全民 ES6+的时代，在 ES6 之前和 ES6 这两个阶段，执行期上下文发生了很大的变化，其变化原因是为了要实现 ES6 中的<code class=\"language-text\">let const</code> 块级作用域特性。</p>\n<h2>ES3</h2>\n<p>在 ES6 之前的执行上下文中的内容主要有三个部分</p>\n<ol>\n<li>作用域链</li>\n<li>变量对象</li>\n<li>this</li>\n</ol>\n<p>使用 JavaScript 对象的形式表示就是</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scopeChain<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  variableObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当代码执行的时候执行上下文可分为两个阶段</p>\n<ol>\n<li>创建阶段</li>\n<li>激活阶段</li>\n</ol>\n<h3>创建阶段</h3>\n<p>所谓创建阶段就是在代码执行前为其创建执行上下文，并为其创建变量、函数、参数等：</p>\n<ol>\n<li>创建 scopeChain</li>\n<li>创建 variableObject，并为其初始化变量、函数、参数</li>\n<li>确定 this 的绑定</li>\n</ol>\n<p>scopeChain 就是我们常说的作用域链，它是一个类似于数组的一个结构，在其中保存在当前函数的上层上下文。</p>\n<p>variableObject 用于存放执行过程中变量和函数，变量提升就是从这里由来，</p>\n<p>this 用来确定当前函数的 this 指向。</p>\n<p>创建完执行上下文之后会对代码进行扫描，并发生如下情况：</p>\n<ol>\n<li>创建 arguments object ，并检查其中的参数，为其初始化成变量存放在 variableObject 中</li>\n<li>扫描上下文中的函数声明，对于找到的每一个函数，将其名作为 key 其函数体作为 value 存放在 variableObject 中，如果已经存在则直接覆盖。</li>\n<li>扫描上下文中的变量声明，在 variableObject 中以其变量名作为 key 创建一个属性，初始化值为 undefined(变量提升的原理)，如果在 variableObject 中已经存在，则直接忽略。</li>\n</ol>\n<p>此时执行上下文的创建阶段已经完毕了，我们找一个例子来看一下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ecTest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">ecTest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>根据上面步骤，这部分代码生成的执行器上下文为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scopeChain<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  variableObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    d<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token function-variable function\">e</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>激活阶段</h3>\n<p>激活阶段就是代码真正执行的时候了，当执行上下文进入激活阶段的时候，会对 variableObject 生成一个引用，就是我们常说的 AO(activeObject)。执行阶段会对 AO 中的属性进行复制处理(AO === VO)。还是以创建阶段的 🌰 为例吧，代码逐行解析步骤如下：</p>\n<p>此时执行上下文为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scopeChain<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  variableObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    d<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token function-variable function\">e</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>执行 console.log(d),输出 undefined</li>\n<li>执行 var d = 1，由于已经提升，声明忽略，执行 d = 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scopeChain<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  variableObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    d<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token function-variable function\">e</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>执行 console.log(1)， 输出 1</li>\n<li>function e() {} 已经提升，忽略</li>\n<li>var f = function() {} 变量提升，声明忽略，执行 f = function(){}</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scopeChain<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  variableObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    d<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">f</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">e</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"6\">\n<li>执行完毕</li>\n</ol>\n<p>这就是激活阶段的过程。</p>\n<h3>小结</h3>\n<p>以上是执行上下文在 ES3 中的具体表现，如果你对 ES6 的一些特性(let const 暂时性死区，generator)有了解的话，一定会觉得以上的东西解释不了 ES6。在 ES6 到来的时候，整体执行上下文做了更新，使用词法环境和变量环境来分别存放上下文中的变量。</p>\n<h2>ES6</h2>\n<p>ES6 的到来，我感觉带来的最大的变革就是推出了块级作用域，使用 let 和 const 来定义变量来摆脱 var 变量提升带来的困惑，同样也为执行上下文增加了复杂度，不像 ES3 时期更有直观性，更加难以理解。但是，即使道路崎岖坎坷也阻挡不了探索技术深度的决心。下面来深入探究 ES6 时期的执行上下文的到底是个什么东西。</p>\n<h2>结构变化</h2>\n<p>ES6 的执行器上下文增加了很多东西。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  VariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  CodeEvaluationState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  Function<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ScriptOrModule<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  Realm<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  Generator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>LexicalEnvironment：词法环境，当获取变量或者 this 值的时候使用</li>\n<li>VariableEnvironment：变量环境，当生命变量时使用。</li>\n<li>CodeEvaluationState：用于恢复代码执行位置</li>\n<li>Function：执行的任务是函数时使用，表示正在执行的函数</li>\n<li>ScriptOrModule：执行的任务是脚本或者模块时使用，表示当前正在执行的代码</li>\n<li>Realm：使用的基础库和内置对象实例</li>\n<li>Generator：仅生成器上下文有这个属性，表示当前生成器</li>\n</ol>\n<p>以上就是目前 JavaScript 执行器上下文中的所用属性。本文以下内容仅探讨和我们代码执行有关的<code class=\"language-text\">LexicalEnvironment</code>和<code class=\"language-text\">VariableEnvironment</code>这两个。</p>\n<p>ES6 的执行器上下文同样分为创建阶段和激活阶段两种。</p>\n<h3>创建阶段</h3>\n<p>创建阶段主要用于初始化词法环境和变量环境，并初始化上下文中的变量、变量声明、函数声明等等。</p>\n<p>无论是词法环境还是变量环境中都存在三个属性：</p>\n<ol>\n<li>EnvironmentRecord：用于存放上下文中的环境记录，就是 ES3 中的 VO</li>\n<li>outer：对上层环境的引用，ES6 采用这种方式来把作用域链接成一个 outer 链条表示作用域链</li>\n<li>this：this 值的绑定</li>\n</ol>\n<p>EnvironmentRecord 存在两种形态：</p>\n<ol>\n<li>Object Environment：仅在全局执行上下文中出现</li>\n<li>Declarative Environment：用于存储函数声明、变量声明以及 catch 子句中的变量。仅在函数执行上下文中出现</li>\n</ol>\n<p><strong>全局执行上下文</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'Object Environment'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>global object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  VariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'Object Environment'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>global object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>函数执行上下文</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExecutionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'Declarative Environment'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>global object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  VariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'Declarative Environment'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>global object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>来看下面这个 🌰</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token keyword\">var</span> c\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n  <span class=\"token keyword\">return</span> e <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> g\n<span class=\"token punctuation\">}</span>\nc <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>当代码执行的时候，首先创建全局执行上下文，其顺序如下：</p>\n<ol>\n<li>首先找 let 和 const 声明，将其变量名做为 key 值放在 LexicalEnvironment 的 EnvironmentRecode 中，值为为初始状态：uninitialized</li>\n<li>找函数声明，将函数名作为 key 值放在 LexicalEnvironment 的 EnvironmentRecord 中，值为函数体</li>\n<li>找变量声明，首先判断词法环境中是否有重名的 const let 声明，如果有的话就会报错，如果没有的话则将变量名作为 key 值放在 VariableEnvironment 的 EnvironmentRecord 下，值为 undefined</li>\n</ol>\n<p>根据以上步骤，所创建的全局执行上下文，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span> uninitialized <span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span> uninitialized <span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      multiply<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span> func <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  VariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      c<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们先跳过全局执行上下文的激活阶段，先看一下 multiply 函数的执行上下文创建状态</p>\n<ol>\n<li>首先创建 Arguments Object,初始化其中的值，放在 LexicalEnvironment 的 EnvironmentRecord 中</li>\n<li>一下步骤同全局执行上下文</li>\n</ol>\n<p>最终 multiply 的执行上下文为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">FunctionExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nLexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      Arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nVariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      g<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>激活阶段</h3>\n<p>激活阶段逐行执行，与 ES3 的时候如出一辙。唯一需要注意的地方是，let 和 const 的声明会首先将值设置为<code class=\"language-text\">uninitialized</code>状态，如果在声明之上使用其变量就会出现暂时性死区的现象。</p>\n<p>全局执行上下文的激活状态最终为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">GlobalExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nLexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      a<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      b<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      multiply<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span> func <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nVariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Object\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      c<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>multiply 函数的执行上下文的激活状态为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">FunctionExectionContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nLexicalEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      Arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nVariableEnvironment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    EnvironmentRecord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      Type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Declarative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Identifier bindings go here</span>\n      g<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    outer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>GlobalLexicalEnvironment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    ThisBinding<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Global Object or <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>结束语</h2>\n<p>一门语言的学习必定要学习其内部的执行机制，自我感觉明白了 JavaScript 执行上下文之后，在代码层面上更加了解执行顺序，容错率高了很多。毕竟，知己知彼，百战百胜嘛。</p>","frontmatter":{"title":"深入了解JavaScript执行上下文","date":"September 27, 2019","description":"深入JavaScript内部执行机制，了解JavaScript执行器上下文。","category":"JavaScript"}}},"pageContext":{"slug":"/content/JavaScript/javascript-execution-context/","previous":{"fields":{"slug":"/content/TypeScript/v8-type-typescript/"},"frontmatter":{"title":"从V8对类型的优化上谈为什么要使用TypeScript"}},"next":{"fields":{"slug":"/content/Vue/vue-compiler-build/"},"frontmatter":{"title":"Vue源码构建过程-不同平台&不同环境"}}}}}