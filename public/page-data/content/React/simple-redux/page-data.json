{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/React/simple-redux/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"3e40ba76-d194-503f-8289-9b69a208ef40","excerpt":"前言 和状态管理是紧密结合的，而本身又没有任何联系。可以不使用管理状态，也可以脱离独立存在。随着的项目越来越复杂，变的繁重，各种和的转变让我们在开发过程中变得头晕眼花，本来就是一个专注于 UI…","html":"<h2>前言</h2>\n<p><code class=\"language-text\">react</code>和状态管理<code class=\"language-text\">redux</code>是紧密结合的，而本身又没有任何联系。<code class=\"language-text\">react</code>可以不使用<code class=\"language-text\">redux</code>管理状态，<code class=\"language-text\">redux</code>也可以脱离<code class=\"language-text\">react</code>独立存在。随着<code class=\"language-text\">react</code>的项目越来越复杂，<code class=\"language-text\">state</code>变的繁重，各种<code class=\"language-text\">prop</code>和<code class=\"language-text\">state</code>的转变让我们在开发过程中变得头晕眼花，<code class=\"language-text\">react</code>本来就是一个专注于 UI 层的库，本不应该让繁杂的<code class=\"language-text\">prop</code>和<code class=\"language-text\">state</code>的逻辑掺杂进来。于是<code class=\"language-text\">Flux</code>的架构出现了，<code class=\"language-text\">Flux</code>架构模式用于抽离<code class=\"language-text\">react</code>的<code class=\"language-text\">state</code>能更好的去构建项目，<code class=\"language-text\">Flux</code>架构模式的实践有好多中，显然<code class=\"language-text\">redux</code>是成功的。</p>\n<p>我在接触<code class=\"language-text\">react</code>和<code class=\"language-text\">redux</code>之前总是听好多人提起<code class=\"language-text\">redux</code>这个东西，我心想它到底有什么魔力，让那么多的人为之惊叹，今天就来揭开<code class=\"language-text\">redux</code>的真面目。</p>\n<h2>redux</h2>\n<p>前面提到<code class=\"language-text\">redux</code>是可以脱离<code class=\"language-text\">react</code>存在的，这句话的意思是<code class=\"language-text\">redux</code>并不是依附于<code class=\"language-text\">react</code>的，即便是用<code class=\"language-text\">jQuery</code>+<code class=\"language-text\">redux</code>也是可以的。<code class=\"language-text\">redux</code>提供的是一种状态管理的方式，同时也定义了一种管理状态的规则，所有需要使用这个小而美的库的项目都必须遵循这个规则，也正是这个规则使用 redux 再书写过程中有了可预测性和可追溯性。</p>\n<h3>redux 的设计原则</h3>\n<p>谈<code class=\"language-text\">redux</code>必然要谈谈它的设计原则，就如同想要更明白的了解一样东西，就需要先了解它是怎么来的，当然历史明白上面这些就够了。</p>\n<p><code class=\"language-text\">redux</code>有三大设计原则</p>\n<ol>\n<li>单一数据源</li>\n<li>状态是只读的</li>\n<li>使用纯函数编写 reducer</li>\n</ol>\n<h4>1.单一数据源</h4>\n<p>单一数据源的意思是说整个<code class=\"language-text\">react</code>项目的<code class=\"language-text\">state</code>都存放在一起，也可以认为存在一个大对象中，单一数据源可以让我们在项目中更专注于数据源的设计与构建上。</p>\n<h4>2.状态是只读的</h4>\n<p>使用过<code class=\"language-text\">redux</code>都知道，视图是通过<code class=\"language-text\">store.getState()</code>方法来获取状态的，通过<code class=\"language-text\">dispatch</code>派发<code class=\"language-text\">action</code>来改变状态。状态是只读的也就是说我们只能通过<code class=\"language-text\">stiore.getState()</code>来获取状态，只能通过<code class=\"language-text\">dispatch</code>派发<code class=\"language-text\">action</code>来改变状态。这也体现了单一数据流动，让我们在构建项目的时候只需要关于一个方向的数据流动。</p>\n<h4>3.使用纯函数编写 reducer</h4>\n<p>我当时在学的时候也是有这样的疑问：为什么要使纯函数来写，什么是纯函数？</p>\n<blockquote>\n<p>所谓纯函数：对于一个函数来说相同的输入必定有相同的输出， 即不依赖外部环境，也不改变外部环境，这样的函数就叫做纯函数。纯函数纯的，是没有副作用的。</p>\n</blockquote>\n<p>明白了纯函数，那么在写<code class=\"language-text\">reducer</code>的时候一定见过这么一段代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>initstate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面代码，再结合纯函数，就可以说对于特定的<code class=\"language-text\">action</code>和<code class=\"language-text\">initstate</code>必定会得到相同的<code class=\"language-text\">state</code>，这里正是体现了<code class=\"language-text\">redux</code>的可预测性。</p>\n<h3>redux 的四个角色</h3>\n<p><code class=\"language-text\">redux</code>提供了一系列规则来规定我们来写代码。可以大致分为四个角色：</p>\n<ol>\n<li>action</li>\n<li>reducer</li>\n<li>dispatch</li>\n<li>store</li>\n</ol>\n<h4>1.action</h4>\n<p><code class=\"language-text\">action</code>是承载状态的载体，一般<code class=\"language-text\">action</code>将视图所产出的数据，发送到 reducer 进行处理。<code class=\"language-text\">action</code>的书写格式一般是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> addAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span><span class=\"token string\">\"ADD\"</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">action</code>其实就是一个 JavaScript 对象，它必须要有一个 type 属性用来标识这个<code class=\"language-text\">action</code>是干嘛的(也可以认为家的地址，去 reducer 中找家)，value 属性是 action 携带来自视图的数据。</p>\n<p><code class=\"language-text\">action</code>的表示方式也可以是一个函数，这样可以更方面的构建<code class=\"language-text\">action</code>,但这个函数必须返回一个对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addAction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> val\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样拿到的数据就灵活多了。</p>\n<p>对于<code class=\"language-text\">action</code>的 type 属性，一般如果 action 变的庞大的话会把所有的 type 抽离出来到一个 constants 中，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ADDTODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADDTODO'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DELETETODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DELETEDOTO'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ADDTODO</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">DELETETODO</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样可以让 type 更清晰一些。</p>\n<h4>2.reducer</h4>\n<p><code class=\"language-text\">reducer</code>指定了应用状态的变化如何响应 <code class=\"language-text\">actions</code> 并发送到 <code class=\"language-text\">store</code>。 在<code class=\"language-text\">redux</code>的设计原则中提到<code class=\"language-text\">使用纯函数来编写reducer</code>，目的是为了让 state 变的可预测。<code class=\"language-text\">reducer</code>的书写方式一般是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n           <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n           <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n           <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">default</span> <span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 switch 判断出什么样的<code class=\"language-text\">action</code>应该使用什么样的逻辑去处理。</p>\n<h5>拆分 reducer</h5>\n<p>当随着业务的增多，那么<code class=\"language-text\">reducer</code>也随着增大，显然一个<code class=\"language-text\">reducer</code>是不可能的，于是必须要拆分<code class=\"language-text\">reducer</code>，拆分<code class=\"language-text\">reducer</code>也是有一定的套路的：比如拆分一个 TodoList，就可以把 todos 操作放在一起，把对 todo 无关的放在一起，最终形成一个根<code class=\"language-text\">reducer。</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">visibilityFilter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">default</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">todos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n        <span class=\"token keyword\">default</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//根reducer</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">rootReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visibilityFilter<span class=\"token punctuation\">:</span> <span class=\"token function\">visibilityFilter</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>visibilityFilter<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    todos<span class=\"token punctuation\">:</span> <span class=\"token function\">todos</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样做的好处在于业务逻辑的分离，让根<code class=\"language-text\">reducer</code>不再那么繁重。好在<code class=\"language-text\">redux</code>提供了<code class=\"language-text\">combineReducers</code>方法用于构建<code class=\"language-text\">rootReducer</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  visibilityFilter<span class=\"token punctuation\">,</span>\n  todos\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这部分代码和上面 rootReducer 的作用完全相同。它的原理是通过传入对象的 key-value 把所有的 state 进行一个糅合。</p>\n<h4>3.dispatch</h4>\n<p><code class=\"language-text\">dispatch</code>的作用是派发一个<code class=\"language-text\">action</code>去执行<code class=\"language-text\">reducer</code>。我觉得<code class=\"language-text\">dispatch</code>就是一个发布者，和<code class=\"language-text\">subscribe</code>一起组合成订阅发布者模式。使<code class=\"language-text\">dispatch</code>派发：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello Redux'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>4.store</h4>\n<p><code class=\"language-text\">store</code>可以说是<code class=\"language-text\">redux</code>的核心了。开头也提到<code class=\"language-text\">store</code>是<code class=\"language-text\">redux</code>状态管理的唯一数据源，除此之外，<code class=\"language-text\">store</code>还是将<code class=\"language-text\">dispatch</code>、<code class=\"language-text\">reducer</code>等联系起来的命脉。</p>\n<p><code class=\"language-text\">store</code>通过<code class=\"language-text\">redux</code>提供的<code class=\"language-text\">createStore</code>创建，它是一个对象，有如下属性：</p>\n<ul>\n<li>store.getState() 获取状态的唯一途径</li>\n<li>store.dispatch(action) 派发 action 响应 reducer</li>\n<li>store.subscribe(handler) 监听状态的变化</li>\n</ul>\n<p>创建 store：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> Redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1. reducer就是我们书写的reducer</span>\n<span class=\"token comment\">//2. initialState是初始化状态</span>\n<span class=\"token comment\">//3. enhancer是中间件</span></code></pre></div>\n<h3>Middleware</h3>\n<p>在创建<code class=\"language-text\">store</code>的时候<code class=\"language-text\">createStore</code>是可以传入三个参数的，第三个参数就是中间件，使用<code class=\"language-text\">redux</code>提供的<code class=\"language-text\">applyMiddleware</code>来调用，<code class=\"language-text\">applyMiddleware</code>相当于是对<code class=\"language-text\">dispatch</code>的一种增强，通过中间件可以在<code class=\"language-text\">dispatch</code>过程中做一些事情，比如打 logger、thunk(异步 action)等等。</p>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//异步action中间件</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> Redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token function\">applMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>思想先告一段落，既然懂得了<code class=\"language-text\">redux</code>的思想，那么接下来手下一个简易版的<code class=\"language-text\">redux</code>。</p>\n<h2>手写一个 min-Redux</h2>\n<p>新的 react-hooks 中除了<code class=\"language-text\">useReducer</code>，集成了<code class=\"language-text\">redux</code>的功能，为什么还要深入了解<code class=\"language-text\">redux</code>呢？</p>\n<p>随着前端技术的迭代，技术的快速更新，我们目前并没有能力去预知或者去引领前端的发展，唯一能做的就是在时代中吸收知识并消化知识，虽然未来有可能<code class=\"language-text\">redux</code>会被<code class=\"language-text\">useReducer</code>所取代，但是思想是不变的，<code class=\"language-text\">redux</code>这个小而美的库设计是奇妙的，也许有哪一天在写业务的时候遇到了某种相似的需求，我们也可以通过借助于这个库的思想去做一些事情。</p>\n<h3>createStore</h3>\n<p>要想了解<code class=\"language-text\">redux</code>，必然要先了解它的核心，它的核心就是<code class=\"language-text\">createStore</code>这个函数，<code class=\"language-text\">store</code>、<code class=\"language-text\">getState</code>,<code class=\"language-text\">dispatch</code>都在这里产出。我个人觉得<code class=\"language-text\">createStore</code>是一个提供一系列方法的订阅发布者模式：通过<code class=\"language-text\">subscribe</code>订阅<code class=\"language-text\">store</code>的变化，通过<code class=\"language-text\">dispatch</code>派发。那么下面就来实现一下这个<code class=\"language-text\">createStore</code>。</p>\n<p>从上面<code class=\"language-text\">store</code>中可以看出。创建一个<code class=\"language-text\">store</code>需要三个参数；</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//1.接受的rootReducer</span>\n<span class=\"token comment\">//2.初始化的状态</span>\n<span class=\"token comment\">//3.dispatch的增强器(中间件)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">createStore</code>还返回一些列函数接口提供调用</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">crateStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    getState<span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">,</span>\n    subscribe<span class=\"token punctuation\">,</span>\n    replaceReducer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>以下代码都是在 createStore 内部</strong></p>\n<h4>getState 的实现</h4>\n<p><code class=\"language-text\">getStore</code>方法的作用就是返回当前的<code class=\"language-text\">store</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> initialState\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>subscribe 的实现</h4>\n<p><code class=\"language-text\">subscribe</code>是<code class=\"language-text\">createStore</code>的订阅者，开发者通过这个方法订阅，当<code class=\"language-text\">store</code>改变的时候执行监听函数。<code class=\"language-text\">subscribe</code>是典型的高阶函数，它的返回值是一个函数，执行该函数移除当前监听函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//创建一个监听时间队列</span>\n<span class=\"token keyword\">let</span> subQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">listener</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//把监听函数放入到监听队列里面</span>\n  subQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//找到当前监听函数的索引</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> subQueue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//通过监听函数的索引把监听函数移除掉。</span>\n      subQueue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>dispatch 的实现</h4>\n<p><code class=\"language-text\">dispatch</code>是<code class=\"language-text\">createStore</code>的发布者，<code class=\"language-text\">dispatch</code>接受一个<code class=\"language-text\">action</code>，来执行<code class=\"language-text\">reducer</code>。<code class=\"language-text\">dispatch</code>在执行<code class=\"language-text\">reducer</code>的同时会执行所有的监听函数(也就是发布)。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> currentReducer <span class=\"token operator\">=</span> reducer\n<span class=\"token keyword\">let</span> isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//这里使用isDispatch做标示，就是说只有当上一个派发完成之后才能派发下一个</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatch error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token function\">currentReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//执行所有的监听函数</span>\n  subQueue<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sub</span> <span class=\"token operator\">=></span> <span class=\"token function\">sub</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> action\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>replaceReducer</h4>\n<p><code class=\"language-text\">replaceReducer</code>顾名思义就是替换<code class=\"language-text\">reducer</code>的意思。再执行<code class=\"language-text\">createState</code>方法的时候<code class=\"language-text\">reducer</code>就作为第一个参数传进去，如果后面想要重新换一个<code class=\"language-text\">reducer</code>，来代码写一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceReducer</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">reducer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//传入一个reduce作为参数，把它赋予currentReducer就可以了。</span>\n  currentReducer <span class=\"token operator\">=</span> reducer\n  <span class=\"token comment\">//更该之后会派发一次dispatch，为什么会派发等下再说。</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'REPLACE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>dispatch({type:“INIT”});</h4>\n<p>上面已经实现了<code class=\"language-text\">createStore</code>的四个方法，剩下的就是<code class=\"language-text\">replaceReducer</code>中莫名的派发了一个<code class=\"language-text\">type</code>为<code class=\"language-text\">REPLACE</code>的<code class=\"language-text\">action</code>，而且翻到源码的最后，也派发一个<code class=\"language-text\">type</code>为<code class=\"language-text\">INIT</code>的<code class=\"language-text\">action</code>，为什么呢？\n<img src=\"https://user-gold-cdn.xitu.io/2019/5/12/16aa96082edef36b?w=433&#x26;h=68&#x26;f=png&#x26;s=13221\"></p>\n<p>其实当使用<code class=\"language-text\">createStore</code>创建<code class=\"language-text\">Store</code>的时候，我们都知道，第一个参数为<code class=\"language-text\">reducer</code>，第二个参数为初始化的<code class=\"language-text\">state</code>。当如果不写第二个参数的时候，我们再来看一下<code class=\"language-text\">reducer</code>的写法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一般在写<code class=\"language-text\">reducer</code>的时候都会给<code class=\"language-text\">state</code>写一个默认值，并且<code class=\"language-text\">default</code>出默认的<code class=\"language-text\">state</code>。当<code class=\"language-text\">createStore</code>不存在，这个默认值如何存储在<code class=\"language-text\">Store</code>中呢？就是这个最后派发的<code class=\"language-text\">type:INIT</code>的作用。在<code class=\"language-text\">replaceReducer</code>中派发也是这个原因，更换<code class=\"language-text\">reducer</code>后派发。</p>\n<h4>完整的 createStore</h4>\n<p>现在已经实现的差不多了，只要再加一些容错就可以了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n *\n * @param {*} reducer   //reducer\n * @param {*} initState    //初始状态\n * @param {*} middleware   //中间件\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">,</span> enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> initialState <span class=\"token comment\">//用于保存状态</span>\n  <span class=\"token keyword\">let</span> currentReducer <span class=\"token operator\">=</span> reducer <span class=\"token comment\">//reducer</span>\n  <span class=\"token keyword\">let</span> listenerQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//存放所有的监听函数</span>\n  <span class=\"token keyword\">let</span> isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    initialState <span class=\"token operator\">=</span> initState\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enhancer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 获取Store\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//判断是否正在派发</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> initialState\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 派发action 并触发所有的listeners\n   * @param {*} action\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//判断是否正在派发</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      initialState <span class=\"token operator\">=</span> <span class=\"token function\">currentReducer</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      isDispatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//执行所有的监听函数</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> listener <span class=\"token keyword\">of</span> listenerQueue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 订阅监听\n   * @param {*} listener\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">listener</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    listenerQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//移除监听</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> listenerQueue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> unListener <span class=\"token operator\">=</span> listenerQueue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> unListener\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 替换reducer\n   * @param {*} reducer\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceReducer</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">reducer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentReducer <span class=\"token operator\">=</span> reducer\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'REPLACE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INIT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    getState<span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token punctuation\">,</span>\n    subscribe<span class=\"token punctuation\">,</span>\n    replaceReducer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> createStore</code></pre></div>\n<h3>compose</h3>\n<p>在<code class=\"language-text\">redux</code>中提供了一个组合函数，如果你知道函数式编程的话，那么对<code class=\"language-text\">compose</code>一定不陌生。如果不了解的话，那我说一个场景肯定就懂了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//有fn1，fn2，fn3这三个函数，写出一个compose函数实现一下功能</span>\n<span class=\"token comment\">//1.  compose(fn1,fn2,fn3) 从右到左执行。</span>\n<span class=\"token comment\">//2.  上一个执行函数的结果作为下一个执行函数的参数。</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的需求就是<code class=\"language-text\">compose</code>函数，也是一个常考的面试题。如何实现实现一个<code class=\"language-text\">compose</code>？一步一步来。</p>\n<p>首先<code class=\"language-text\">compose</code>接受的是一系列函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>从右到左执行，我们采用数组的<code class=\"language-text\">reduce</code>方法，利用惰性求值的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fns<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> g</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这就是一个<code class=\"language-text\">compose</code>函数。</p>\n<h3>揭开中间件的秘密-applayMiddleware</h3>\n<p><code class=\"language-text\">redux</code>中的中间件就是对<code class=\"language-text\">dispatch</code>的一种增强，在<code class=\"language-text\">createStore</code>中实现这个东西很简单。源码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">,</span>enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//判断第三个参数的存在。</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>enhancer <span class=\"token operator\">&amp;&amp;</span> type enhancer <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//满足enhance存在的条件，直接return，组织后面的运行。</span>\n        <span class=\"token comment\">//通过柯里化的方式传参</span>\n        <span class=\"token comment\">//为什么传入createStore？</span>\n            <span class=\"token comment\">//虽然是增强，自然返回之后依然是一个store对象，所以要使用createStore做一些事情。</span>\n        <span class=\"token comment\">//后面两个参数</span>\n            <span class=\"token comment\">//中间件是增强，必要的reducer和state也必要通过createStore传进去。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span>crateStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面就是中间件再<code class=\"language-text\">createStore</code>中的实现。</p>\n<p>中间件的构建通过<code class=\"language-text\">applyMiddleware</code>实现，来看一下<code class=\"language-text\">applyMiddleware</code>是怎么实现。由上面可以看出<code class=\"language-text\">applyMiddleware</code>是一个柯里化函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">applyMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">crateStore</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">applyMiddleware</code>中需要执行<code class=\"language-text\">createStore</code>来得到接口方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">applyMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>middlewares</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">createStore</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//占位dispatch，避免在中间件过程中调用</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> midllewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n    dispatch\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//把middlewareAPI传入每一个中间件中</span>\n  <span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">middleware</span> <span class=\"token operator\">=></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//增强dispatch生成，重写占位dispatch,把store的默认dispatch传进去，</span>\n  dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//最后把增强的dispatch和store返回出去。</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>store<span class=\"token punctuation\">,</span>\n    dispatch\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面就是<code class=\"language-text\">applyMiddleware</code>的实现方法。</p>\n<h4>如何写一个中间件</h4>\n<p>根据<code class=\"language-text\">applyMiddleware</code>中间件参数的传入，可以想出一个基本的中间件是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//业务逻辑</span>\n  <span class=\"token comment\">//store是传入的middlewareAPI</span>\n  <span class=\"token comment\">//next是store基础的dispatch</span>\n  <span class=\"token comment\">//action是dispatch的action</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这就是一个中间件的逻辑了。</p>\n<h4>异步 action</h4>\n<p>在写逻辑的时候必然会用到异步数据的，我们知道<code class=\"language-text\">reducer</code>是纯函数，不允许有副作用操作的，从上面到现在也可以明白整个<code class=\"language-text\">redux</code>都是函数式编程的思想，是不存在副作用的，那么异步数据怎么实现呢？必然是通过<code class=\"language-text\">applyMiddleware</code>提供的中间件接口实现了。</p>\n<p>异步中间件必须要求<code class=\"language-text\">action</code>是一个函数，根据上面中间件的逻辑，我们来写一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>判断传入的<code class=\"language-text\">action</code>是否是一个函数，如果是函数使用增强<code class=\"language-text\">dispatch</code>，如果不是函数使用普通的<code class=\"language-text\">dispatch</code>。</p>\n<h2>总结</h2>\n<p>到此为止就是我能力范围内所理解的<code class=\"language-text\">Redux</code>。我个人认为，要学习一个东西一定要看一下它的源码，学习它的思想。技术更新迭代，思想是不变的，无非就是思想的转变。如果有不对的地方，还望大佬们指点。</p>","frontmatter":{"title":"手写一个Redux-simple","date":"July 15, 2019","description":"理解函数式编程思想，实现一个简单版的Redux","category":"React"}}},"pageContext":{"slug":"/content/React/simple-redux/","previous":null,"next":{"fields":{"slug":"/content/HTTP/http-to-https/"},"frontmatter":{"title":"记一次从HTTP升级HTTPS完全指南"}}}}}