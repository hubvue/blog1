{"componentChunkName":"component---src-templates-blog-post-js","path":"/content/React/reactdom-render/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog","author":"Kim"}},"markdownRemark":{"id":"5e4d50e1-bfb1-5579-941f-3767cbc2d285","excerpt":"…","html":"<h3>前言</h3>\n<p>前段时间组内老大找我谈话，当聊到看源码的时候，向我分析出了看源码的两个阶段</p>\n<ul>\n<li>第一个阶段：了解源码的执行过程</li>\n<li>第二个阶段：明白源码作者为什么要这么做</li>\n</ul>\n<p>我当时就很感慨(原来我第一个阶段都没有达到)，其实很多看源码的同学都处于第一个阶段，因为第二个阶段除了作者本身以及源码贡献者，能够了解作者本意是很难的一件事。</p>\n<p>读源码是一个学习的过程，仅仅第一个阶段对我们的收益也同样是无限大的。个人觉得有一下几点好处：</p>\n<ol>\n<li>能够极大的提高我们写的代码的稳定性，因为我们已经明白内部是怎样一个过程，在写代码的时候就可以避免错误的出现</li>\n<li>能够了解框架本身特性的实现方法，有助于学习</li>\n<li>明白内部原理，在这个技术迭代飞快的时代更能站住脚</li>\n</ol>\n<p>至于第二个阶段，由于本身并没有触碰到，所以不敢评论，如果有大佬达到，可以分享一下。</p>\n<p>本篇文章是对 ReactDom.render 方法执行过程的探究，版本是 16.8.6。</p>\n<h3>ReactDom.render 到底做了啥？</h3>\n<p>在写 React 的时候，无论是使用 create-react-app 生成的项目还是使用 webpack 自己搭建的项目，基本上都会接触到一个方法</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个 render 函数到底干了什么呢？接下来我们一起来深入源码揭开它神秘的面纱。</p>\n<blockquote>\n<p>前提声明：源码中 Dev 的代码不进行解析。</p>\n</blockquote>\n<p>首先定位到源码中 render 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">legacyRenderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    element<span class=\"token punctuation\">,</span>\n    container<span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    callback\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>render 函数接收了三个参数：</p>\n<ol>\n<li>第一个参数是我们写的 App 组件</li>\n<li>第二个参数是渲染到 html 上的 Dom 元素，也就是我们的#root</li>\n<li>第三个参数是 render 执行完成后执行的回调</li>\n</ol>\n<p>在 render 中什么也没有做直接调用了<code class=\"language-text\">legacyRenderSubtreeIntoContainer</code>方法并传进去一堆参数(先记录下传的是什么)。</p>\n<p>下面定位到<code class=\"language-text\">legacyRenderSubtreeIntoContainer</code>函数中</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">legacyRenderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">parentComponent<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  container<span class=\"token punctuation\">,</span>\n  forceHydrate<span class=\"token punctuation\">,</span>\n  callback</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> root<span class=\"token punctuation\">:</span> Root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>_reactRootContainer <span class=\"token operator\">=</span> <span class=\"token function\">legacyCreateRootFromDOMContainer</span><span class=\"token punctuation\">(</span>\n      container<span class=\"token punctuation\">,</span>\n      forceHydrate\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> originalCallback <span class=\"token operator\">=</span> callback\n      <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">originalCallback</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">unbatchedUpdates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n          parentComponent<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">,</span>\n          callback\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> originalCallback <span class=\"token operator\">=</span> callback\n      <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">originalCallback</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n        parentComponent<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">,</span>\n        callback\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先分析一下参数是什么：</p>\n<ol>\n<li>parentComponent：渲染的父组件，render 入口可得为 null</li>\n<li>children：我们的 App 组件</li>\n<li>container：渲染到 html 上的 dom 容器</li>\n<li>forceHydrate：是否为 hydrate 模式渲染，对服务端渲染了解的同学一定知道这个 API，render 入口为 false</li>\n<li>callback：渲染完成执行的回调函数</li>\n</ol>\n<p>在<code class=\"language-text\">legacyRenderSubtreeIntoContainer</code>中一共做了两件事：</p>\n<ol>\n<li>实例化 ReactRoot，其中实例化了 FiberRoot 和 RootFiber</li>\n<li>unbatchedUpdates(非批处理)同步更新</li>\n</ol>\n<p>我们先来看如何得到一个 ReactRoot，定位到<code class=\"language-text\">legacyCreateRootFromDOMContainer</code>方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">legacyCreateRootFromDOMContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> forceHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shouldHydrate <span class=\"token operator\">=</span>\n    forceHydrate <span class=\"token operator\">||</span> <span class=\"token function\">shouldHydrateDueToLegacyHeuristic</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shouldHydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> warned <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">let</span> rootSibling\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rootSibling <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 这里就是清理操作</span>\n      container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>rootSibling<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> isConcurrent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> isConcurrent<span class=\"token punctuation\">,</span> shouldHydrate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>未完待续</h3>","frontmatter":{"title":"深入探究ReactDom.render方法执行过程","date":"September 14, 2019","description":"深入源码，探究React.render方法的执行过程。","category":"React"}}},"pageContext":{"slug":"/content/React/reactdom-render/","previous":{"fields":{"slug":"/content/Webpack/webpack-chunk-id-cache/"},"frontmatter":{"title":"深入webpack的chunkId对线上缓存的思考"}},"next":{"fields":{"slug":"/content/TypeScript/v8-type-typescript/"},"frontmatter":{"title":"从V8对类型的优化上谈为什么要使用TypeScript"}}}}}