{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Kim Blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"","fields":{"slug":"/content/TypeScript/typescript-type-infer/"},"frontmatter":{"date":"December 30, 2019","title":"TypeScript类型推断机制","description":"探究Typescript中的类型推断机制","category":"TypeScript"}}},{"node":{"excerpt":"无论是前端浏览器页面还是端上 App 路由管理是必不可少的，路由可以让页面间跳转更加流畅。因 Flutter 万物皆 Widget 的特定，路由的跳转其实也就是切换不同的 Widget，这和前端思想很相似（组件化开发），因此很好理解。接下来就看一下 Flutter…","fields":{"slug":"/content/Flutter/flutter-route-manage/"},"frontmatter":{"date":"December 06, 2019","title":"Flutter：路由管理","description":"Flutter页面间路由管理","category":"Flutter"}}},{"node":{"excerpt":"前言 现在的工作使用 Vue 比较频繁，于是就想了解一下 Vue 原理上的东西，就先拿 Vue 的插件机制开刀吧。 Vue 的插件机制就是一个 API，即。 当我们在项目中使用 Vuex 的时候，肯定会写这样一段代码。 没有看过原理之前一直都觉得这个 API 好强大，就 use…","fields":{"slug":"/content/Vue/vue-use/"},"frontmatter":{"date":"October 20, 2019","title":"Vue插件机制解析","description":"深入源码解析Vue的插件机制","category":"Vue"}}},{"node":{"excerpt":"前言 Mixin 也就是混入的意思，就是说通过某种方式将一个对象的一些属性，混入到目标对象身上。对于我个人来说，其实并不太喜欢 Mixin 这是方式的，因为它对开发者来说是透明的，我们不知道什么时候同事去绑定了一个全局的 Mixin，当然用的好那肯定是不方便的，也无奈 Vue…","fields":{"slug":"/content/Vue/vue-mixin/"},"frontmatter":{"date":"October 20, 2019","title":"Vue的mixin机制及mergeOptions解析","description":"深入源码解析Vue的mixin机制","category":"Vue"}}},{"node":{"excerpt":"webpack 的痛点 one：进退两难的 loader 众所周知，webpack 打包一切，万物皆模块，成就 webpack 特性的根本就是 loader，webpack 使用 loader 加载各种文件，例如加载一个 loader：loader 首先接收到的是 string…","fields":{"slug":"/content/Webpack/webpck-thread-cary/"},"frontmatter":{"date":"October 15, 2019","title":"深入理解webpack痛点及解决方案","description":"深入理解webpack的loader及单线程的问题，抛出解决方案","category":"Webpack"}}},{"node":{"excerpt":"前言 随着互联网时代的飞速发展，用户对产品性能越来越关注，特别是服务端程序，一个功能跑几十秒实在是无法忍受，于是总是想尽各种办法去提高性能，也包括 API 层面的选择，当然性能测试是我们选择的重要依据。 Benchmark Benchmark 是 Node.js…","fields":{"slug":"/content/Test/optimize-test-benchmark/"},"frontmatter":{"date":"October 13, 2019","title":"Benchmark写性能测试","description":"使用Benchmark初次做性能测试","category":"Test"}}},{"node":{"excerpt":"webpack 产出物存在的问题 webpack 万物皆模块的理念，每一个 js 都是一个 JavaScript 模块。一个 bundle 是由多个 module 合成的，一个 bundle 是一个 js 文件，所以 webpack 自己实现了一套 commonjs…","fields":{"slug":"/content/Webpack/webpack-scope-hoisting/"},"frontmatter":{"date":"October 11, 2019","title":"Webpack模块化的问题及Scope hoisting原理","description":"分析webpack产出文件js模块化的问题，探究Scope hoisting怎么解决","category":"Webpack"}}},{"node":{"excerpt":"webpack 打包多页的痛点 我们都知道前端还有一个名字叫 webpack 配置工程师，也表示我们前端在写项目的时候，写 webpack 配置要花费很长的时间。\n当 webpack 去打包一个 SPA 的时候还好，配置只需要写一遍就可以了。但是如果使用 webpack…","fields":{"slug":"/content/Webpack/webpack-mpa-solution/"},"frontmatter":{"date":"October 11, 2019","title":"webpack多页面打包方案","description":"分析webpack打包多页的痛点，统一规则，动态配置解决","category":"Webpack"}}},{"node":{"excerpt":"前言 随着项目需求的增加，Node…","fields":{"slug":"/content/design-pattern/node-ioc/"},"frontmatter":{"date":"October 03, 2019","title":"IOC在Nodejs上的初体验","description":"模块间解耦，IOC在Node上的实战","category":"design-pattern"}}},{"node":{"excerpt":"本文主要深入源码分析我们在之前 Vue 到底做了哪些事情。 Vue 加载的两种方式 首先说一个 Vue 有两种加载方式： Runtime Only Runtime + Compiler 这两种方式有什么不同呢？ Runtime Only 使用 Runtime Only…","fields":{"slug":"/content/Vue/vue-start-pre-newvue/"},"frontmatter":{"date":"September 30, 2019","title":"浅析从加载到new Vue()--Vue做了什么？","description":"深入源码探究Vue从加载到new Vue()之前到底做了什么事情。","category":"Vue"}}},{"node":{"excerpt":"整体 build 过程 执行 npm run build 得到各平台的 rollup 配置信息 通过终端传入的构建平台或环境，过滤掉不需要构建的平台配置 递归同步构建 写入文件  build npm run build 执行命令，会定位到 scripts 下的 build…","fields":{"slug":"/content/Vue/vue-compiler-build/"},"frontmatter":{"date":"September 28, 2019","title":"Vue源码构建过程-不同平台&不同环境","description":"深入源码探究Vue源代码的构建过程。","category":"Vue"}}},{"node":{"excerpt":"前言 作为一个前端 er，当我们在写 JavaScript 代码的时候，经常会被 JavaScript 中饱受诟病的特性搞的晕头转向。其变量提升、作用域、闭包等特性我们只能通过例子来摸索出特性的规律从而得出一个感觉的结论。其实，这些特性都和 JavaScript…","fields":{"slug":"/content/JavaScript/javascript-execution-context/"},"frontmatter":{"date":"September 27, 2019","title":"深入了解JavaScript执行上下文","description":"深入JavaScript内部执行机制，了解JavaScript执行器上下文。","category":"JavaScript"}}},{"node":{"excerpt":"TypeScript 据目前来看基本上是前端开发者的标配，我们可能仅仅知道 TypeScirpt 解决了 JavaScript 在类型上的苦恼，但是对于带给我们更多的底层优化可能熟知甚少，接下来我们就从 V8 内部对类型的优化上来探讨一下为什么要使用 TypeScript…","fields":{"slug":"/content/TypeScript/v8-type-typescript/"},"frontmatter":{"date":"September 14, 2019","title":"从V8对类型的优化上谈为什么要使用TypeScript","description":"从V8内部对JavaScript代码的解析过程中来探讨一下为什么要使用TypeScript","category":"TypeScript"}}},{"node":{"excerpt":"…","fields":{"slug":"/content/React/reactdom-render/"},"frontmatter":{"date":"September 14, 2019","title":"深入探究ReactDom.render方法执行过程","description":"深入源码，探究React.render方法的执行过程。","category":"React"}}},{"node":{"excerpt":"前言 想必经常使用基于 webpack 打包工具的框架的同学们，无论是使用 React 还是 Vue 在性能优化上使用最多的应该是分包策略（按需加载）。按需加载的方式使我们的每一个 bundle 变的更小，在每一个单页中只需要引入当前页所使用到的 JavaScript…","fields":{"slug":"/content/Webpack/webpack-chunk-id-cache/"},"frontmatter":{"date":"August 26, 2019","title":"深入webpack的chunkId对线上缓存的思考","description":"深入webpack的chunkIds的生成原理，剖析chunkIds对线上缓存的破坏，提出完美的解决办法。","category":"Webpack"}}},{"node":{"excerpt":"","fields":{"slug":"/content/TypeScript/typescript-options/"},"frontmatter":{"date":"August 18, 2019","title":"TypeScript的配置信息","description":"记录TypeScript的一些配置信息","category":"TypeScript"}}},{"node":{"excerpt":"前言 目前大多数网站都是在用的 HTTPS，为什么要用 HTTPS 大家一定是都知道的，从 HTTP 升级到 HTTPS，也是为网站的安全性来考虑的。HTTPS 是在 HTTP 的基础上加上了 SSL 安全认证，是正所谓 HTTPS=HTTP + SSL…","fields":{"slug":"/content/HTTP/http-to-https/"},"frontmatter":{"date":"August 17, 2019","title":"记一次从HTTP升级HTTPS完全指南","description":"在Nginx服务器上将自己的网站从HTTP升级到HTTPS的完全实战","category":"HTTP"}}},{"node":{"excerpt":"前言 和状态管理是紧密结合的，而本身又没有任何联系。可以不使用管理状态，也可以脱离独立存在。随着的项目越来越复杂，变的繁重，各种和的转变让我们在开发过程中变得头晕眼花，本来就是一个专注于 UI…","fields":{"slug":"/content/React/simple-redux/"},"frontmatter":{"date":"July 15, 2019","title":"手写一个Redux-simple","description":"理解函数式编程思想，实现一个简单版的Redux","category":"React"}}}]}},"pageContext":{}}}